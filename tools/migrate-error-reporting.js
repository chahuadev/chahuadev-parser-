#!/usr/bin/env node
// ! ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// !  ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ä‡∏≤‡∏´‡∏±‡∏ß ‡∏î‡∏µ‡πÄ‡∏ß‡∏•‡∏•‡∏≠‡∏õ‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î (Chahua Development Co., Ltd.)
// !  Repository: https://github.com/chahuadev/chahuadev-Sentinel.git
// !  Version: 1.0.0
// !  License: MIT
// !  Contact: chahuadev@gmail.com
// ! ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
/**
 * Error Reporting Migration Tool
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å reportError (binary-reporter) ‡πÄ‡∏õ‡πá‡∏ô report (universal-reporter)
 * ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ PowerShell
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT_DIR = path.resolve(__dirname, '..');

/**
 * ‡∏™‡∏≥‡∏£‡∏≠‡∏á (backup) ‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
 */
function backupFile(filePath) {
    const backupPath = filePath + '.backup';
    try {
        fs.copyFileSync(filePath, backupPath);
        return backupPath;
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå: ${error.message}`);
        return null;
    }
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
 */
function migrateImports(content) {
    let modified = content;
    let changes = [];

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà import { reportError } ‡∏à‡∏≤‡∏Å binary-reporter
    // ‡πÄ‡∏õ‡πá‡∏ô import { report } ‡∏à‡∏≤‡∏Å universal-reporter
    const importPattern = /import\s*\{\s*reportError\s*\}\s*from\s*['"]([^'"]*binary-reporter[^'"]*)['"]/g;
    
    if (importPattern.test(content)) {
        modified = content.replace(
            importPattern,
            (match, path) => {
                const newPath = path.replace('binary-reporter', 'universal-reporter');
                changes.push({
                    type: 'import',
                    old: match,
                    new: `import { report } from '${newPath}'`
                });
                return `import { report } from '${newPath}'`;
            }
        );
    }

    return { modified, changes };
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ reportError() ‡πÄ‡∏õ‡πá‡∏ô report()
 */
function migrateFunctionCalls(content) {
    let modified = content;
    let changes = [];

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô reportError() ‡∏ó‡∏µ‡πà‡∏û‡∏ö
    const reportErrorMatches = content.match(/reportError\s*\(/g);
    if (reportErrorMatches) {
        modified = content.replace(/reportError\s*\(/g, 'report(');
        changes.push({
            type: 'function_call',
            count: reportErrorMatches.length,
            description: `‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà reportError() ‡πÄ‡∏õ‡πá‡∏ô report() ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${reportErrorMatches.length} ‡∏à‡∏∏‡∏î`
        });
    }

    return { modified, changes };
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
 */
function migrateFile(filePath) {
    console.log(`\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${path.relative(ROOT_DIR, filePath)}`);

    try {
        // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
        const original = fs.readFileSync(filePath, 'utf8');
        
        // Backup ‡∏Å‡πà‡∏≠‡∏ô
        const backupPath = backupFile(filePath);
        if (!backupPath) {
            console.log(`   ‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ backup ‡πÑ‡∏î‡πâ)`);
            return { success: false, reason: 'backup_failed' };
        }

        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports
        const { modified: step1, changes: importChanges } = migrateImports(original);
        
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ functions
        const { modified: step2, changes: callChanges } = migrateFunctionCalls(step1);

        const allChanges = [...importChanges, ...callChanges];

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        if (allChanges.length === 0) {
            console.log(`   ‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡πÑ‡∏°‡πà‡∏û‡∏ö reportError)`);
            fs.unlinkSync(backupPath); // ‡∏•‡∏ö backup
            return { success: true, reason: 'no_changes' };
        }

        // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        fs.writeFileSync(filePath, step2, 'utf8');

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        console.log(`   ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`);
        allChanges.forEach(change => {
            if (change.type === 'import') {
                console.log(`      üì¶ Import: binary-reporter ‚Üí universal-reporter`);
            } else if (change.type === 'function_call') {
                console.log(`      üîß ${change.description}`);
            }
        });
        console.log(`   üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: ${path.basename(backupPath)}`);

        return { 
            success: true, 
            changes: allChanges.length,
            backup: backupPath
        };

    } catch (error) {
        console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
        return { success: false, reason: error.message };
    }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (syntax check)
 */
async function validateFile(filePath) {
    try {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° import ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax
        await import(`file:///${filePath}`);
        return { valid: true };
    } catch (error) {
        return { valid: false, error: error.message };
    }
}

// Main execution
async function main() {
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('   Error Reporting Migration Tool');
    console.log('   reportError (binary-reporter) ‚Üí report (universal-reporter)');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å files-to-migrate.json
    const listPath = path.join(__dirname, 'files-to-migrate.json');
    
    if (!fs.existsSync(listPath)) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö files-to-migrate.json');
        console.log('   ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô: node tools/check-error-reporting.js ‡∏Å‡πà‡∏≠‡∏ô\n');
        process.exit(1);
    }

    const filesToMigrate = JSON.parse(fs.readFileSync(listPath, 'utf8'));
    
    console.log(`üìã ‡∏û‡∏ö ${filesToMigrate.length} ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n`);
    console.log('‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:');
    console.log('   - ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å backup ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (.backup)');
    console.log('   - ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á');
    console.log('   - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ restore ‡∏à‡∏≤‡∏Å backup ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á\n');

    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    filesToMigrate.forEach((file, index) => {
        console.log(`   ${index + 1}. ${file.path} (${file.reportErrorCount} occurrences)`);
    });

    console.log('\n');

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    const results = {
        success: [],
        failed: [],
        noChanges: []
    };

    for (const file of filesToMigrate) {
        const result = migrateFile(file.fullPath);
        
        if (result.success) {
            if (result.reason === 'no_changes') {
                results.noChanges.push(file.path);
            } else {
                results.success.push({
                    path: file.path,
                    changes: result.changes,
                    backup: result.backup
                });
            }
        } else {
            results.failed.push({
                path: file.path,
                reason: result.reason
            });
        }
    }

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('   Migration Summary');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:          ${results.success.length} files`);
    console.log(`   ‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${results.noChanges.length} files`);
    console.log(`   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:        ${results.failed.length} files`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    if (results.success.length > 0) {
        console.log('‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
        results.success.forEach(file => {
            console.log(`   ‚úì ${file.path} (${file.changes} changes)`);
        });
        console.log('');
    }

    if (results.failed.length > 0) {
        console.log('‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:');
        results.failed.forEach(file => {
            console.log(`   ‚úó ${file.path} (${file.reason})`);
        });
        console.log('');
    }

    console.log('üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:');
    console.log('   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß');
    console.log('   2. ‡∏£‡∏±‡∏ô: node cli.js --help (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)');
    console.log('   3. ‡∏£‡∏±‡∏ô: node tools/check-error-reporting.js (‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß)');
    console.log('   4. ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .backup ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\n');

    process.exit(results.failed.length > 0 ? 1 : 0);
}

main().catch(error => {
    console.error('‚ùå Fatal error:', error);
    process.exit(1);
});
