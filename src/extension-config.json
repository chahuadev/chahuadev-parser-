
{
  "projectInfo": {
    "repository": "https://github.com/chahuadev-com/Chahuadev-Sentinel.git",
    "author": "บริษัท ชาหัว ดีเวลลอปเมนต์ จำกัด (Chahua Development Co., Ltd.)",
    "version": "1.0.0", 
    "license": "MIT",
    "contact": "chahuadev@gmail.com"
  },
  "defaultSettings": {
    "securityLevel": "FORTRESS",
    "scanPatterns": {
      "include": "**/*.{js,ts,jsx,tsx}",
      "exclude": "**/node_modules/**"
    },
    "timing": {
      "scanThrottleMs": 500,
      "statusMessageDurationMs": 3000
    },
    "ui": {
      "highlightLength": 15,
      "notificationStyle": "subtle"
    }
  },
  "messages": {
    "activation": " Chahuadev Sentinel Extension activated",
    "ready": " Chahuadev Sentinel ready for action",
    "noActiveFile": " No active file to scan",
    "scanCompleted": " Workspace scan completed: {scannedCount} files, {totalViolations} issues found",
    "fileClean": " File is clean - no violations found",
    "issuesFound": " Found {violationCount} quality issue{plural}",
    "scanning": "Scanning workspace...",
    "scanningFile": "Scanning {fileName}...",
    "securityStatus": " Security Status: FORTRESS LEVEL\n Events: {totalEvents} | Violations: {violations}\n Uptime: {uptime}s | Status: {status}",
    "securityInitFailed": "Chahuadev Sentinel: Security initialization failed",
    "securityError": "Security error during scan",
    "securityNotInitialized": "Security middleware not initialized",
    "securityStatusFailed": "Failed to retrieve security status",
    "scanSuccess": "File scanned successfully"
  },
  "ruleMessages": {
    "short": {
      "NO_MOCKING": " Mock",
      "NO_HARDCODE": " Hardcode", 
      "NO_SILENT_FALLBACKS": " Silent fallback",
      "NO_INTERNAL_CACHING": " Cache",
      "NO_EMOJI": " Emoji"
    },
    "detailed": {
      "NO_MOCKING": {
        "title": " Testing Issue: {message}",
        "approach": "• Use dependency injection for testable code\n• Create test doubles manually for better control\n• Consider integration tests over mocked unit tests",
        "reason": "Mock frameworks create brittle tests that break when implementation details change, leading to false confidence and maintenance overhead."
      },
      "NO_HARDCODE": {
        "title": " Configuration Issue: {message}",
        "approach": "• Move to environment variables (.env file)\n• Use configuration objects or JSON files\n• Consider feature flags for behavioral settings",
        "reason": "Hardcoded values make code inflexible, hard to deploy across environments, and create security risks for sensitive data."
      },
      "NO_SILENT_FALLBACKS": {
        "title": " Error Handling Issue: {message}",
        "approach": "• Add explicit error logging and handling\n• Throw meaningful errors instead of returning defaults\n• Use result objects with success/error states",
        "reason": "Silent failures hide bugs, make debugging impossible, and create unpredictable system behavior in production."
      },
      "NO_INTERNAL_CACHING": {
        "title": " Architecture Issue: {message}",
        "approach": "• Use external cache stores (Redis, Memcached)\n• Implement database-level caching\n• Consider CDN for static content caching",
        "reason": "Internal caching causes memory leaks, scaling issues, and cache invalidation problems in distributed systems."
      },
      "NO_EMOJI": {
        "title": " Text Encoding Issue: {message}",
        "approach": "• Use descriptive text: \"SUCCESS\", \"ERROR\", \"WARNING\"\n• Create constants for status indicators\n• Use icons from icon libraries if visual indicators needed",
        "reason": "Emoji can cause encoding issues, reduce accessibility, and create inconsistent rendering across different systems."
      }
    }
  }
}