{
  "__grammar_name": "JSX Grammar",
  "__grammar_language": "JSX/React",
  "__grammar_version": "React 18.x",
  "__grammar_spec": "JSX Specification + React Extensions",
  "__grammar_purpose": "กำหนด grammar สำหรับ JSX syntax ที่ใช้ใน React และ frameworks อื่นๆ ครอบคลุม elements, expressions, attributes, hooks, และ transforms",
  "__grammar_sections": 14,
  "__grammar_description": "Complete JSX/React grammar with elements, expressions, attributes, built-in components, namespaces, hooks patterns, component patterns, children types, special props, transforms, babel options, TSX modes, patterns, and escaping rules",
  "__grammar_used_by": "JSXParser, ReactTransformer, BabelCompiler, TypeScriptCompiler",
  "__grammar_header": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "__section_01_number": 1,
  "__section_01_name": "elements",
  "__section_01_title": " Section 01: JSX Elements & Tags",
  "__section_01_language": "JSX",
  "__section_01_total_items": 8,
  "__section_01_description": "Core JSX element syntax including opening/closing tags, self-closing tags, fragments, and tag delimiters",
  "__section_01_purpose": "เก็บ syntax พื้นฐานของ JSX elements รวมถึง opening tags (<), closing tags (>), self-closing (/), fragments (<>), และ disambiguation rules",
  "__section_01_responsibility": "Provides JSX element syntax: <, >, />, <Fragment>, </>, tag opening/closing, self-closing elements, HTML vs Component disambiguation",
  "__section_01_used_by": "JSXParser, JSXElementParser, ReactTransformer",
  "__section_01_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "elements": {
    "<": {
      "type": "tag-start",
      "source": "ANTLR",
      "category": "jsx-element",
      "description": "JSX opening tag start",
      "followedBy": [
        "IDENTIFIER",
        "UPPERCASE_IDENTIFIER",
        "DOT",
        "Fragment"
      ],
      "precededBy": [
        "NEWLINE",
        "PAREN_OPEN",
        "BRACE_OPEN",
        "RETURN",
        "ASSIGN"
      ],
      "parentContext": [
        "JSXElement",
        "JSXFragment",
        "ReturnStatement",
        "Expression"
      ],
      "startsExpr": true,
      "beforeExpr": false,
      "mustBeFollowedByIdentifier": true,
      "isJSXToken": true,
      "startsJSXElement": true,
      "requiresClosing": true,
      "canBeComponent": true,
      "canBeHTMLTag": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "JSX vs generic type parameter",
          "jsx": "return <Component />",
          "typescript": "const fn = <T>() => {}",
          "context": "JSX in .jsx/.tsx files",
          "note": "TypeScript: < after = is generic, not JSX"
        }
      ],
      "errorMessage": "JSX opening tag must be followed by element name.",
      "commonTypos": [
        "<<",
        "<-"
      ],
      "notes": "Must be followed by valid identifier or Fragment syntax. Uppercase = Component, lowercase = HTML.",
      "quirks": [
        "Uppercase starts with capital = Component",
        "Lowercase = HTML/SVG element",
        "Can conflict with TypeScript generics",
        "Must match closing tag name",
        "Fragment shorthand: <>"
      ],
      "stage": "stable",
      "jsxVersion": "JSX 1.0",
      "spec": "ANTLR JSX Grammar",
      "bestPractice": "Use Fragment <> instead of <div> wrappers when possible.",
      "useCases": [
        "Opening JSX element",
        "Component rendering",
        "HTML element rendering",
        "Fragment shorthand"
      ],
      "examples": [
        "<div>",
        "<Component>",
        "<Component.Child>",
        "<>",
        "<ns:element>"
      ]
    },
    ">": {
      "type": "tag-end",
      "source": "ANTLR",
      "category": "jsx-element",
      "description": "JSX opening tag end",
      "followedBy": [
        "JSXText",
        "JSXElement",
        "JSXExpression",
        "NEWLINE"
      ],
      "precededBy": [
        "IDENTIFIER",
        "ATTRIBUTE",
        "STRING",
        "JSXExpression"
      ],
      "parentContext": [
        "JSXOpeningElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "endsOpeningTag": true,
      "isJSXToken": true,
      "endsJSXOpeningTag": true,
      "requiresClosing": true,
      "allowsChildren": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "> vs /> vs comparison",
          "openingTag": "<Component>",
          "selfClosing": "<Component />",
          "comparison": "x > y",
          "note": "Context-dependent"
        }
      ],
      "errorMessage": "JSX tag closed. Expects children or closing tag.",
      "commonTypos": [
        ">>"
      ],
      "notes": "After >, element expects children or closing tag. Self-closing uses />.",
      "quirks": [
        "Requires matching closing tag",
        "Can contain JSX children",
        "Different from self-closing />",
        "Can be nested"
      ],
      "stage": "stable",
      "jsxVersion": "JSX 1.0",
      "spec": "ANTLR JSX Grammar",
      "bestPractice": "Use self-closing /> for elements without children.",
      "useCases": [
        "Complete opening tag",
        "Allow children",
        "Nested JSX elements"
      ],
      "example": "<Component>children</Component>"
    },
    "</": {
      "type": "closing-tag-start",
      "source": "ANTLR",
      "category": "jsx-element",
      "description": "JSX closing tag start",
      "followedBy": [
        "IDENTIFIER",
        "UPPERCASE_IDENTIFIER",
        "DOT"
      ],
      "precededBy": [
        "JSXText",
        "JSXElement",
        "JSXExpression",
        "NEWLINE"
      ],
      "parentContext": [
        "JSXClosingElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "closesElement": true,
      "isJSXToken": true,
      "startsJSXClosingTag": true,
      "mustMatchOpening": true,
      "requiresIdentifier": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "Closing tag must match opening",
          "valid": "<Component>...</Component>",
          "invalid": "<Component>...</OtherComponent>",
          "note": "Case-sensitive matching"
        }
      ],
      "errorMessage": "JSX closing tag must match opening tag name.",
      "commonTypos": [
        "</",
        "< /"
      ],
      "notes": "Must match opening tag exactly. Case-sensitive.",
      "quirks": [
        "Must match opening tag name",
        "Case-sensitive",
        "No attributes allowed",
        "Fragment closing: </>"
      ],
      "stage": "stable",
      "jsxVersion": "JSX 1.0",
      "spec": "ANTLR JSX Grammar",
      "bestPractice": "Ensure opening and closing tags match exactly.",
      "useCases": [
        "Close JSX element",
        "Match opening tag",
        "Fragment closing"
      ],
      "examples": [
        "</Component>",
        "</div>",
        "</Component.Child>",
        "</>"
      ]
    },
    "/>": {
      "type": "self-closing-tag-end",
      "source": "ANTLR",
      "category": "jsx-element",
      "description": "JSX self-closing tag end",
      "followedBy": [
        "NEWLINE",
        "COMMA",
        "SEMICOLON",
        "PAREN_CLOSE",
        "JSXElement"
      ],
      "precededBy": [
        "IDENTIFIER",
        "ATTRIBUTE",
        "STRING",
        "JSXExpression"
      ],
      "parentContext": [
        "JSXSelfClosingElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "closesElement": true,
      "isJSXToken": true,
      "endsJSXElement": true,
      "selfClosing": true,
      "noChildren": true,
      "noClosingTag": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "Self-closing vs regular tag",
          "selfClosing": "<Component />",
          "withChildren": "<Component></Component>",
          "note": "Self-closing has no children"
        }
      ],
      "errorMessage": "Self-closing JSX tag. No children or closing tag needed.",
      "commonTypos": [
        "/ >",
        "//>",
        ">/",
        "</>",
        "< />"
      ],
      "notes": "Self-closing tag has no children. No closing tag needed.",
      "quirks": [
        "No children allowed",
        "No closing tag needed",
        "Space before / is optional",
        "XML-style self-closing",
        "Must be used for void elements"
      ],
      "stage": "stable",
      "jsxVersion": "JSX 1.0",
      "spec": "ANTLR JSX Grammar",
      "bestPractice": "Use for elements without children. Void elements must be self-closing.",
      "useCases": [
        "Elements without children",
        "Void elements (img, input, br)",
        "Components without children",
        "SVG elements"
      ],
      "examples": [
        "<Component />",
        "<img src=\"...\" />",
        "<input type=\"text\" />",
        "<br />",
        "<Circle cx={50} cy={50} r={40} />"
      ]
    },
    "<>": {
      "type": "fragment-start",
      "source": "React",
      "version": "16.2",
      "category": "jsx-fragment",
      "description": "JSX Fragment shorthand - no extra DOM node",
      "followedBy": [
        "JSXElement",
        "JSXText",
        "JSXExpression",
        "NEWLINE"
      ],
      "precededBy": [
        "RETURN",
        "PAREN_OPEN",
        "ASSIGN",
        "NEWLINE"
      ],
      "parentContext": [
        "JSXFragment",
        "ReturnStatement",
        "Expression"
      ],
      "startsExpr": true,
      "beforeExpr": false,
      "isFragment": true,
      "isJSXToken": true,
      "startsJSXFragment": true,
      "requiresClosing": true,
      "noAttributes": true,
      "noKey": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "Fragment shorthand vs React.Fragment",
          "shorthand": "<>children</>",
          "longForm": "<React.Fragment>children</React.Fragment>",
          "withKey": "<React.Fragment key={key}>children</React.Fragment>",
          "note": "Shorthand cannot have attributes (including key)"
        }
      ],
      "errorMessage": "Fragment shorthand. Use <React.Fragment> if you need key prop.",
      "commonTypos": [
        "< >",
        "<>>",
        "<<>"
      ],
      "notes": "No attributes allowed. Use React.Fragment for key prop in lists.",
      "quirks": [
        "No attributes allowed",
        "No key prop (use React.Fragment)",
        "Renders no DOM node",
        "Must be closed with </>",
        "React 16.2+ only"
      ],
      "stage": "stable",
      "reactVersion": "16.2",
      "spec": "React Documentation",
      "bestPractice": "Use <> for grouping elements without extra DOM node. Use <React.Fragment key={...}> in lists.",
      "useCases": [
        "Group elements without wrapper",
        "Multiple root elements in component",
        "Avoid unnecessary div wrappers",
        "Cleaner JSX structure"
      ],
      "examples": [
        "return <><Header /><Content /></>",
        "<>{items.map(i => <Item key={i} />)}</>",
        "condition && <><A /><B /></>"
      ],
      "alternatives": [
        "<React.Fragment>",
        "<div>"
      ]
    },
    "</>": {
      "type": "fragment-end",
      "source": "React",
      "version": "16.2",
      "category": "jsx-fragment",
      "description": "JSX Fragment closing tag",
      "followedBy": [
        "NEWLINE",
        "SEMICOLON",
        "COMMA",
        "PAREN_CLOSE"
      ],
      "precededBy": [
        "JSXElement",
        "JSXText",
        "JSXExpression",
        "NEWLINE"
      ],
      "parentContext": [
        "JSXFragment"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "closesFragment": true,
      "isJSXToken": true,
      "endsJSXFragment": true,
      "mustMatchOpening": true,
      "onlyForFragments": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "Fragment closing must match <>",
          "valid": "<>...</>",
          "invalid": "<>...</Component>",
          "note": "Only closes <> fragments"
        }
      ],
      "errorMessage": "Fragment closing tag. Must match <> opening.",
      "commonTypos": [
        "< />",
        "<//>>",
        "</ >"
      ],
      "notes": "Only closes <> fragments. Cannot close React.Fragment.",
      "quirks": [
        "Only closes <> shorthand",
        "Cannot close <React.Fragment>",
        "No whitespace allowed",
        "Must match <> exactly"
      ],
      "stage": "stable",
      "reactVersion": "16.2",
      "spec": "React Documentation",
      "bestPractice": "Always match <> with </>.",
      "useCases": [
        "Close fragment shorthand",
        "Complete JSX structure",
        "End element grouping"
      ],
      "examples": [
        "<>children</>",
        "<><A /><B /></>",
        "return <><Header /><Footer /></>"
      ]
    }
  },
  "__section_02_number": 2,
  "__section_02_name": "expressions",
  "__section_02_title": " Section 02: JSX Expressions",
  "__section_02_language": "JSX",
  "__section_02_total_items": 9,
  "__section_02_description": "JavaScript expression embedding within JSX using curly braces, including props, children, spread operators, and conditionals",
  "__section_02_purpose": "เก็บ syntax สำหรับฝัง JavaScript expressions ใน JSX ด้วย curly braces ({ }), รวมถึง spread operators (...), conditionals, และ expression containers",
  "__section_02_responsibility": "Provides JSX expression syntax: {expression}, {...spread}, conditional rendering, embedded JavaScript, prop values, children expressions",
  "__section_02_used_by": "JSXExpressionParser, ExpressionEvaluator, ReactRuntime",
  "__section_02_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "expressions": {
    "{": {
      "type": "expression-start",
      "source": "ANTLR",
      "category": "jsx-expression",
      "description": "JSX expression container start",
      "followedBy": [
        "Expression",
        "IDENTIFIER",
        "LITERAL",
        "BRACE_OPEN",
        "BRACKET_OPEN",
        "DOT_DOT_DOT"
      ],
      "precededBy": [
        "EQUALS",
        "GREATER_THAN",
        "JSXText",
        "NEWLINE"
      ],
      "parentContext": [
        "JSXExpressionContainer",
        "JSXAttribute",
        "JSXChildren"
      ],
      "startsExpr": true,
      "beforeExpr": false,
      "embedsJavaScript": true,
      "isJSXToken": true,
      "startsExpression": true,
      "requiresClosing": true,
      "allowsAnyExpression": true,
      "canSpreadProps": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "{ in JSX vs object literal",
          "jsxExpression": "<Component prop={value} />",
          "jsxChildren": "<div>{expression}</div>",
          "objectLiteral": "const obj = { key: value }",
          "context": "In JSX = expression, in JS = object"
        }
      ],
      "errorMessage": "JSX expression must contain valid JavaScript expression.",
      "commonTypos": [
        "{{",
        "{=",
        "{ "
      ],
      "notes": "Embeds JavaScript expression. Must be closed with }. Can spread props with {...obj}.",
      "quirks": [
        "Embeds any JavaScript expression",
        "In attributes: prop={value}",
        "In children: {expression}",
        "Spread props: {...props}",
        "Cannot contain statements",
        "Comments require {/* */}"
      ],
      "stage": "stable",
      "jsxVersion": "JSX 1.0",
      "spec": "ANTLR JSX Grammar",
      "bestPractice": "Keep expressions simple. Extract complex logic to variables.",
      "useCases": [
        "Dynamic attribute values",
        "Embed JavaScript in children",
        "Conditional rendering",
        "Spread props",
        "Array mapping"
      ],
      "examples": [
        "{value}",
        "{condition ? <A /> : <B />}",
        "{items.map(i => <Item key={i} />)}",
        "{...props}",
        "{/* comment */}"
      ]
    },
    "}": {
      "type": "expression-end",
      "source": "ANTLR",
      "category": "jsx-expression",
      "description": "JSX expression container end",
      "followedBy": [
        "NEWLINE",
        "LESS_THAN",
        "JSXText",
        "BRACE_OPEN",
        "ATTRIBUTE"
      ],
      "precededBy": [
        "Expression",
        "IDENTIFIER",
        "LITERAL",
        "PAREN_CLOSE",
        "BRACKET_CLOSE",
        "BRACE_CLOSE"
      ],
      "parentContext": [
        "JSXExpressionContainer"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "closesExpression": true,
      "isJSXToken": true,
      "endsExpression": true,
      "mustMatchOpening": true,
      "returnsToJSX": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "} closes JSX expression",
          "valid": "{expression}",
          "nested": "{{key: value}}",
          "note": "Returns to JSX context after }"
        }
      ],
      "errorMessage": "Closes JSX expression. Returns to JSX context.",
      "commonTypos": [
        "}}",
        "} }"
      ],
      "notes": "Must match opening {. Returns to JSX parsing after }.",
      "quirks": [
        "Returns to JSX context",
        "Must balance with {",
        "Can be nested (object literals)",
        "Closing spread: {...props}"
      ],
      "stage": "stable",
      "jsxVersion": "JSX 1.0",
      "spec": "ANTLR JSX Grammar",
      "bestPractice": "Ensure { and } are balanced.",
      "useCases": [
        "Close JSX expression",
        "Return to JSX parsing",
        "Complete attribute value",
        "Complete children expression"
      ],
      "example": "<Component prop={value}>{children}</Component>"
    },
    "{...": {
      "type": "spread-start",
      "source": "ANTLR",
      "category": "jsx-spread",
      "description": "JSX spread attributes syntax",
      "followedBy": [
        "IDENTIFIER",
        "Expression"
      ],
      "precededBy": [
        "WHITESPACE",
        "NEWLINE",
        "IDENTIFIER"
      ],
      "parentContext": [
        "JSXSpreadAttribute",
        "JSXOpeningElement"
      ],
      "startsExpr": true,
      "beforeExpr": false,
      "spreadsObject": true,
      "isJSXToken": true,
      "isSpreadOperator": true,
      "requiresObject": true,
      "spreadsProps": true,
      "disambiguation": [
        {
          "language": "JSX",
          "rule": "Spread props vs spread in expression",
          "spreadProps": "<Component {...props} />",
          "spreadArray": "<Component items={[...array]} />",
          "spreadObject": "<Component style={{...styles}} />",
          "note": "Different contexts"
        }
      ],
      "errorMessage": "Spread operator in JSX. Must spread object containing props.",
      "commonTypos": [
        "{..",
        "{...}",
        "{ ..."
      ],
      "notes": "Spreads object properties as JSX props. Common for passing all props.",
      "quirks": [
        "Spreads object as props",
        "Order matters (later overrides)",
        "Can spread multiple objects",
        "React-specific syntax",
        "Not standard JavaScript"
      ],
      "stage": "stable",
      "jsxVersion": "JSX 1.0",
      "spec": "ANTLR JSX Grammar",
      "bestPractice": "Use for prop forwarding. Place specific props after to override.",
      "useCases": [
        "Forward all props",
        "Merge prop objects",
        "Override default props",
        "HOC prop forwarding"
      ],
      "examples": [
        "<Component {...props} />",
        "<Component {...defaults} className=\"override\" />",
        "<Component {...props} {...overrides} />",
        "<input {...register(\"name\")} />"
      ]
    }
  },
  "__section_03_number": 3,
  "__section_03_name": "attributes",
  "__section_03_title": " Section 03: JSX Attributes & Props",
  "__section_03_language": "JSX",
  "__section_03_total_items": 7,
  "__section_03_description": "React-specific prop names and attribute mappings from HTML to JSX (className, htmlFor, dangerouslySetInnerHTML, etc.)",
  "__section_03_purpose": "เก็บ attributes และ props ที่ React ใช้ รวมถึงชื่อที่แปลงจาก HTML (class  className, for  htmlFor) และ special props",
  "__section_03_responsibility": "Provides JSX attribute mappings: className (class), htmlFor (for), dangerouslySetInnerHTML, style object, event handlers (onClick, onChange)",
  "__section_03_used_by": "JSXAttributeParser, PropValidator, ReactDOM",
  "__section_03_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "attributes": {
    "className": {
      "htmlEquivalent": "class",
      "source": "React"
    },
    "htmlFor": {
      "htmlEquivalent": "for",
      "source": "React"
    },
    "defaultValue": {
      "htmlEquivalent": "value",
      "source": "React",
      "controlled": false
    },
    "defaultChecked": {
      "htmlEquivalent": "checked",
      "source": "React",
      "controlled": false
    },
    "data-*": {
      "pattern": "data-[a-z]+",
      "source": "HTML5"
    },
    "aria-*": {
      "pattern": "aria-[a-z]+",
      "source": "ARIA"
    },
    "onClick": {
      "eventType": "MouseEvent",
      "source": "React"
    },
    "onChange": {
      "eventType": "ChangeEvent",
      "source": "React"
    },
    "onSubmit": {
      "eventType": "FormEvent",
      "source": "React"
    },
    "onKeyDown": {
      "eventType": "KeyboardEvent",
      "source": "React"
    },
    "onKeyUp": {
      "eventType": "KeyboardEvent",
      "source": "React"
    },
    "onFocus": {
      "eventType": "FocusEvent",
      "source": "React"
    },
    "onBlur": {
      "eventType": "FocusEvent",
      "source": "React"
    },
    "onMouseEnter": {
      "eventType": "MouseEvent",
      "source": "React"
    },
    "onMouseLeave": {
      "eventType": "MouseEvent",
      "source": "React"
    },
    "onInput": {
      "eventType": "FormEvent",
      "source": "React"
    },
    "key": {
      "type": "special",
      "source": "React",
      "description": "List item identifier"
    },
    "ref": {
      "type": "special",
      "source": "React",
      "description": "DOM reference"
    },
    "dangerouslySetInnerHTML": {
      "type": "special",
      "source": "React",
      "description": "Raw HTML injection"
    },
    "style": {
      "type": "object",
      "source": "React",
      "description": "Inline styles as object"
    }
  },
  "__section_04_number": 4,
  "__section_04_name": "builtInComponents",
  "__section_04_title": " Section 04: React Built-in Components",
  "__section_04_language": "JSX/React",
  "__section_04_total_items": 10,
  "__section_04_description": "React's built-in components like Fragment, Suspense, StrictMode, Profiler, and their props/usage patterns",
  "__section_04_purpose": "เก็บ components ที่ React มีมาให้ built-in เช่น Fragment (<>), Suspense, StrictMode, Profiler รวมถึง props และวิธีใช้งาน",
  "__section_04_responsibility": "Provides React built-in components: Fragment, Suspense, StrictMode, Profiler, ErrorBoundary, Portal, Context providers/consumers",
  "__section_04_used_by": "ReactRenderer, ComponentResolver, JSXTransformer",
  "__section_04_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "builtInComponents": {
    "Fragment": {
      "source": "React",
      "version": "16.2",
      "shorthand": "<>",
      "category": "react-component",
      "description": "Groups children without adding DOM node",
      "followedBy": [
        "GREATER_THAN",
        "ATTRIBUTE"
      ],
      "precededBy": [
        "LESS_THAN",
        "DOT"
      ],
      "parentContext": [
        "JSXElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "isBuiltIn": true,
      "isReactComponent": true,
      "isBuiltInComponent": true,
      "noDOMNode": true,
      "allowsKey": true,
      "allowsChildren": true,
      "disambiguation": [
        {
          "language": "React",
          "rule": "Fragment vs fragment shorthand",
          "longForm": "<React.Fragment key={key}>...</React.Fragment>",
          "shorthand": "<>...</>",
          "note": "Use longform for key prop in lists"
        }
      ],
      "errorMessage": "Fragment groups elements without DOM node.",
      "commonTypos": [
        "Frag",
        "fragment",
        "Fragement"
      ],
      "notes": "Renders no DOM node. Use <> shorthand when no key needed. Only accepts key and children props.",
      "quirks": [
        "Renders no DOM node",
        "Shorthand: <>",
        "Accepts only key prop",
        "Useful in lists",
        "Cannot have ref"
      ],
      "stage": "stable",
      "reactVersion": "16.2",
      "spec": "React Documentation",
      "bestPractice": "Use <> shorthand unless you need key prop.",
      "useCases": [
        "Group elements without wrapper",
        "Return multiple elements",
        "List items with key",
        "Avoid unnecessary divs"
      ],
      "examples": [
        "<React.Fragment key={id}><A /><B /></React.Fragment>",
        "<>...</>",
        "{items.map(i => <Fragment key={i.id}>...</Fragment>)}"
      ]
    },
    "StrictMode": {
      "source": "React",
      "version": "16.3",
      "category": "react-component",
      "description": "Enables development warnings and checks",
      "followedBy": [
        "GREATER_THAN"
      ],
      "precededBy": [
        "LESS_THAN",
        "DOT"
      ],
      "parentContext": [
        "JSXElement",
        "Root"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "isBuiltIn": true,
      "isReactComponent": true,
      "isBuiltInComponent": true,
      "developmentOnly": true,
      "noProductionEffect": true,
      "allowsChildren": true,
      "disambiguation": [
        {
          "language": "React",
          "rule": "StrictMode development checks",
          "checks": [
            "Unsafe lifecycle methods",
            "Legacy string ref API",
            "Deprecated findDOMNode",
            "Unexpected side effects",
            "Legacy context API"
          ]
        }
      ],
      "errorMessage": "StrictMode enables extra development checks.",
      "commonTypos": [
        "StrictMode",
        "Strict",
        "strictMode"
      ],
      "notes": "Development-only. Intentionally double-invokes functions to detect side effects.",
      "quirks": [
        "Development only",
        "No production effect",
        "Double-invokes components",
        "Detects side effects",
        "Can be nested"
      ],
      "stage": "stable",
      "reactVersion": "16.3",
      "spec": "React Documentation",
      "bestPractice": "Wrap entire app in <StrictMode> during development.",
      "useCases": [
        "Enable development warnings",
        "Detect unsafe patterns",
        "Prepare for concurrent features",
        "Find side effects"
      ],
      "examples": [
        "<React.StrictMode><App /></React.StrictMode>",
        "<StrictMode><Router><App /></Router></StrictMode>"
      ]
    },
    "Suspense": {
      "source": "React",
      "version": "16.6",
      "category": "react-component",
      "description": "Lazy loading boundary with fallback",
      "followedBy": [
        "GREATER_THAN",
        "ATTRIBUTE"
      ],
      "precededBy": [
        "LESS_THAN",
        "DOT"
      ],
      "parentContext": [
        "JSXElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "isBuiltIn": true,
      "isReactComponent": true,
      "isBuiltInComponent": true,
      "requiresFallback": true,
      "allowsChildren": true,
      "catchesPromise": true,
      "disambiguation": [
        {
          "language": "React",
          "rule": "Suspense for code splitting and data fetching",
          "codeSplitting": "<Suspense fallback={<Loading />}><LazyComponent /></Suspense>",
          "dataFetching": "<Suspense fallback={<Spinner />}><DataComponent /></Suspense>",
          "note": "React 18: data fetching support"
        }
      ],
      "errorMessage": "Suspense requires fallback prop.",
      "commonTypos": [
        "Suspence",
        "Suspend",
        "suspense"
      ],
      "notes": "Catches thrown promises. Shows fallback while loading. React 18: supports data fetching.",
      "quirks": [
        "Requires fallback prop",
        "Catches thrown promises",
        "Code splitting with lazy()",
        "React 18: data fetching",
        "Can be nested"
      ],
      "stage": "stable",
      "reactVersion": "16.6",
      "enhancements": {
        "18.0": "Data fetching support"
      },
      "spec": "React Documentation",
      "bestPractice": "Place close to lazy-loaded components. Provide meaningful fallback.",
      "useCases": [
        "Code splitting",
        "Lazy component loading",
        "Data fetching (React 18+)",
        "Loading states"
      ],
      "examples": [
        "<Suspense fallback={<Loading />}><LazyComponent /></Suspense>",
        "<Suspense fallback={<Spinner />}>{children}</Suspense>",
        "const Lazy = lazy(() => import(\"./Component\"))"
      ]
    },
    "Profiler": {
      "source": "React",
      "version": "16.5",
      "category": "react-component",
      "description": "Measures render performance",
      "followedBy": [
        "GREATER_THAN",
        "ATTRIBUTE"
      ],
      "precededBy": [
        "LESS_THAN",
        "DOT"
      ],
      "parentContext": [
        "JSXElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "isBuiltIn": true,
      "isReactComponent": true,
      "isBuiltInComponent": true,
      "requiresId": true,
      "requiresOnRender": true,
      "allowsChildren": true,
      "developmentRecommended": true,
      "disambiguation": [
        {
          "language": "React",
          "rule": "Profiler callback signature",
          "onRender": "function onRender(id, phase, actualDuration, baseDuration, startTime, commitTime) {}",
          "phases": [
            "mount",
            "update"
          ],
          "note": "Use React DevTools Profiler for visual analysis"
        }
      ],
      "errorMessage": "Profiler requires id and onRender callback.",
      "commonTypos": [
        "Profiler",
        "profiler",
        "Profile"
      ],
      "notes": "Measures render time. Requires id and onRender callback. Has performance cost.",
      "quirks": [
        "Requires id prop",
        "Requires onRender callback",
        "Has performance cost",
        "Development tool",
        "Can be nested",
        "Tracks render phases"
      ],
      "stage": "stable",
      "reactVersion": "16.5",
      "spec": "React Documentation",
      "bestPractice": "Use in development only. Remove or disable in production.",
      "useCases": [
        "Performance profiling",
        "Render time tracking",
        "Optimization debugging",
        "Component analysis"
      ],
      "examples": [
        "<Profiler id=\"App\" onRender={callback}><App /></Profiler>",
        "<Profiler id=\"Navigation\" onRender={onRenderCallback}><Nav /></Profiler>"
      ]
    },
    "Offscreen": {
      "source": "React",
      "version": "18.0",
      "experimental": true,
      "category": "react-component",
      "description": "Pre-render content off-screen (experimental)",
      "followedBy": [
        "GREATER_THAN",
        "ATTRIBUTE"
      ],
      "precededBy": [
        "LESS_THAN",
        "DOT"
      ],
      "parentContext": [
        "JSXElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "isBuiltIn": true,
      "isReactComponent": true,
      "isBuiltInComponent": true,
      "isExperimental": true,
      "allowsChildren": true,
      "preRendersContent": true,
      "disambiguation": [
        {
          "language": "React",
          "rule": "Offscreen experimental API",
          "note": "Pre-renders content without displaying. Experimental - may change."
        }
      ],
      "errorMessage": "Offscreen is experimental. API may change.",
      "commonTypos": [
        "OffScreen",
        "offscreen"
      ],
      "notes": "EXPERIMENTAL. Pre-renders hidden content. API subject to change.",
      "quirks": [
        "Experimental API",
        "May change or be removed",
        "Pre-renders off-screen",
        "Not for production",
        "Part of concurrent features"
      ],
      "stage": "experimental",
      "reactVersion": "18.0",
      "spec": "React Experimental",
      "bestPractice": "Do not use in production. Wait for stable release.",
      "useCases": [
        "Pre-render hidden content",
        "Experimental concurrent features",
        "Future optimizations"
      ],
      "examples": [
        "<Offscreen mode=\"hidden\"><Content /></Offscreen>",
        "// Experimental - do not use in production"
      ],
      "warning": "Experimental API. Do not use in production."
    },
    "ErrorBoundary": {
      "source": "React",
      "version": "16.0",
      "category": "react-pattern",
      "description": "Catch JavaScript errors in component tree (pattern, not built-in)",
      "followedBy": [
        "GREATER_THAN",
        "ATTRIBUTE"
      ],
      "precededBy": [
        "LESS_THAN"
      ],
      "parentContext": [
        "JSXElement"
      ],
      "startsExpr": false,
      "beforeExpr": false,
      "isPattern": true,
      "isReactComponent": true,
      "notBuiltIn": true,
      "requiresClassComponent": true,
      "allowsChildren": true,
      "disambiguation": [
        {
          "language": "React",
          "rule": "Error boundary implementation",
          "required": [
            "static getDerivedStateFromError(error)",
            "componentDidCatch(error, errorInfo)"
          ],
          "note": "Must be class component. No functional equivalent yet."
        }
      ],
      "errorMessage": "Error boundaries must be class components with componentDidCatch.",
      "commonTypos": [
        "ErrorBoundry",
        "errorBoundary"
      ],
      "notes": "NOT built-in. Must implement yourself. Catches errors in child components.",
      "quirks": [
        "Not a built-in component",
        "Must be class component",
        "No functional equivalent",
        "Catches render errors",
        "Does not catch event handler errors",
        "Does not catch async errors"
      ],
      "stage": "stable",
      "reactVersion": "16.0",
      "spec": "React Documentation",
      "bestPractice": "Wrap top-level routes. Provide fallback UI. Log errors.",
      "useCases": [
        "Catch render errors",
        "Prevent white screen",
        "Show error UI",
        "Log errors to service"
      ],
      "examples": [
        "class ErrorBoundary extends React.Component { /* ... */ }",
        "<ErrorBoundary fallback={<Error />}><App /></ErrorBoundary>",
        "// Use react-error-boundary library"
      ],
      "alternatives": [
        "react-error-boundary library"
      ]
    }
  },
  "__section_05_number": 5,
  "__section_05_name": "namespaces",
  "__section_05_title": " Section 05: JSX Namespaces (SVG, MathML)",
  "__section_05_language": "JSX",
  "__section_05_total_items": 12,
  "__section_05_description": "XML namespace support for SVG and MathML elements within JSX",
  "__section_05_purpose": "เก็บ XML namespaces สำหรับ SVG elements (svg, path, circle, rect, g) และ MathML elements (math, mrow, mi, mo, mn) ที่ใช้ใน JSX",
  "__section_05_responsibility": "Provides namespace declarations for SVG (Scalable Vector Graphics) and MathML (Mathematical Markup Language) elements in JSX",
  "__section_05_used_by": "JSXNamespaceParser, SVGRenderer, MathMLRenderer",
  "__section_05_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "namespaces": {
    "svg": {},
    "path": {},
    "circle": {},
    "rect": {},
    "g": {},
    "math": {},
    "mrow": {},
    "mi": {},
    "mo": {},
    "mn": {}
  },
  "__section_06_number": 6,
  "__section_06_name": "hooksPattern",
  "__section_06_title": " Section 06: React Hooks Pattern",
  "__section_06_language": "JSX/React",
  "__section_06_total_items": 1,
  "__section_06_description": "Naming convention pattern for React Hooks (must start with 'use' prefix)",
  "__section_06_purpose": "เก็บกฎการตั้งชื่อ React Hooks ที่ต้องขึ้นต้นด้วย 'use' เช่น useState, useEffect, useCustomHook",
  "__section_06_responsibility": "Provides hooks naming pattern: must start with 'use' prefix (useState, useEffect, useContext, custom hooks)",
  "__section_06_used_by": "ReactHooksLinter, ESLintReactHooks, HooksValidator",
  "__section_06_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "hooksPattern": {
    "pattern": {},
    "description": "Custom hooks must start with \"use\"",
    "source": "React",
    "examples": [
      "useState",
      "useEffect",
      "useCustomHook"
    ]
  },
  "__section_07_number": 7,
  "__section_07_name": "componentPattern",
  "__section_07_title": " Section 07: Component Naming Pattern",
  "__section_07_language": "JSX/React",
  "__section_07_total_items": 1,
  "__section_07_description": "Naming convention for React components (must start with uppercase letter)",
  "__section_07_purpose": "เก็บกฎการตั้งชื่อ React Components ที่ต้องขึ้นต้นด้วยตัวพิมพ์ใหญ่เพื่อแยกจาก HTML tags เช่น Button, UserProfile",
  "__section_07_responsibility": "Provides component naming pattern: must start with uppercase letter to distinguish from HTML tags (Button vs button)",
  "__section_07_used_by": "JSXParser, ComponentResolver, ReactTransformer",
  "__section_07_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "componentPattern": {
    "pattern": {},
    "description": "Components must start with uppercase letter",
    "source": "React",
    "examples": [
      "MyComponent",
      "Button",
      "UserProfile"
    ]
  },
  "__section_08_number": 8,
  "__section_08_name": "childrenTypes",
  "__section_08_title": " Section 08: JSX Children Types",
  "__section_08_language": "JSX",
  "__section_08_total_items": 8,
  "__section_08_description": "Types of content that can be children of JSX elements: elements, text, expressions, fragments, arrays, booleans, null, undefined",
  "__section_08_purpose": "เก็บประเภทของ children ที่ JSX รองรับ: JSXElement, JSXText, JSXExpression, JSXFragment, arrays, booleans (ignored), null/undefined (ignored)",
  "__section_08_responsibility": "Provides JSX children type system: JSXElement, JSXText, JSXExpression, JSXFragment, arrays, conditional rendering (boolean/null/undefined)",
  "__section_08_used_by": "JSXChildrenParser, ReactRenderer, ChildrenValidator",
  "__section_08_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "childrenTypes": {
    "JSXElement": {
      "description": "Nested JSX element",
      "source": "ANTLR"
    },
    "JSXText": {
      "description": "Plain text content",
      "source": "ANTLR"
    },
    "JSXExpression": {
      "description": "JavaScript expression in {}",
      "source": "ANTLR"
    },
    "JSXFragment": {
      "description": "Fragment (<>...</>)",
      "source": "ANTLR"
    },
    "null": {
      "description": "Null renders nothing",
      "source": "React"
    },
    "undefined": {
      "description": "Undefined renders nothing",
      "source": "React"
    },
    "boolean": {
      "description": "Boolean renders nothing",
      "source": "React"
    },
    "string": {
      "description": "String renders as text",
      "source": "React"
    },
    "number": {
      "description": "Number renders as text",
      "source": "React"
    },
    "Array": {
      "description": "Array of children",
      "source": "React"
    }
  },
  "specialProps": {
    "children": {
      "type": "ReactNode",
      "description": "Content between opening and closing tags",
      "source": "React"
    },
    "key": {
      "type": "string | number",
      "description": "Unique identifier for list items",
      "source": "React",
      "required": "in lists"
    },
    "ref": {
      "type": "RefObject | RefCallback",
      "description": "Reference to DOM element or component instance",
      "source": "React"
    }
  },
  "__section_09_number": 9,
  "__section_09_name": "specialProps",
  "__section_09_title": " Section 09: Special Props",
  "__section_09_language": "JSX/React",
  "__section_09_total_items": 3,
  "__section_09_description": "React's special props with reserved behavior: children, key, ref",
  "__section_09_purpose": "เก็บ props พิเศษของ React ที่มีพฤติกรรมเฉพาะ: children (content), key (list identifier), ref (DOM reference)",
  "__section_09_responsibility": "Provides special props: children (ReactNode), key (string|number for lists), ref (RefObject|RefCallback for DOM access)",
  "__section_09_used_by": "ReactReconciler, PropValidator, RefManager",
  "__section_09_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "transforms": {
    "classic": {
      "description": "React.createElement() calls",
      "source": "Babel",
      "pragma": "React.createElement",
      "pragmaFrag": "React.Fragment"
    },
    "automatic": {
      "description": "jsx() runtime calls (React 17+)",
      "source": "Babel",
      "runtime": "jsx/jsx-runtime",
      "version": "React 17+"
    }
  },
  "__section_10_number": 10,
  "__section_10_name": "babelOptions",
  "__section_10_title": " Section 10: Babel Transform Options",
  "__section_10_language": "JSX/Babel",
  "__section_10_total_items": 5,
  "__section_10_description": "Babel compiler options for JSX transformation: pragma, pragmaFrag, runtime, importSource, development mode",
  "__section_10_purpose": "เก็บตัวเลือกการแปลง JSX ของ Babel: pragma (factory function), pragmaFrag (Fragment), runtime (classic/automatic), importSource",
  "__section_10_responsibility": "Provides Babel JSX transform options: pragma (React.createElement), pragmaFrag (React.Fragment), runtime mode, import source configuration",
  "__section_10_used_by": "BabelCompiler, JSXTransformer, WebpackBabelLoader",
  "__section_10_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "babelOptions": {
    "pragma": {
      "default": "React.createElement",
      "description": "JSX factory function"
    },
    "pragmaFrag": {
      "default": "React.Fragment",
      "description": "Fragment factory"
    },
    "throwIfNamespace": {
      "default": false,
      "description": "Error on XML namespaces"
    },
    "useBuiltIns": {
      "default": false,
      "description": "Use native Object.assign"
    },
    "useSpread": {
      "default": false,
      "description": "Use spread for props"
    },
    "runtime": {
      "default": "classic",
      "description": "JSX transform runtime"
    },
    "importSource": {
      "default": "react",
      "description": "JSX runtime import source"
    }
  },
  "__section_11_number": 11,
  "__section_11_name": "tsxModes",
  "__section_11_title": " Section 11: TypeScript JSX Modes",
  "__section_11_language": "TSX/TypeScript",
  "__section_11_total_items": 4,
  "__section_11_description": "TypeScript compiler JSX transformation modes: preserve, react, react-native, react-jsx (automatic)",
  "__section_11_purpose": "เก็บโหมดการแปลง JSX ของ TypeScript Compiler: preserve (.jsx), react (createElement), react-native, react-jsx (automatic)",
  "__section_11_responsibility": "Provides TypeScript JSX modes: preserve (keep JSX), react (createElement), react-native (JSX for native), react-jsx (automatic runtime)",
  "__section_11_used_by": "TypeScriptCompiler, TSXTransformer, TSConfig",
  "__section_11_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "tsxModes": {
    "preserve": {
      "description": "Keep JSX for subsequent transform",
      "output": ".jsx"
    },
    "react": {
      "description": "Transform to React.createElement",
      "output": ".js"
    },
    "react-native": {
      "description": "Keep JSX for React Native",
      "output": ".js"
    },
    "react-jsx": {
      "description": "Use jsx() runtime (React 17+)",
      "output": ".js"
    },
    "react-jsxdev": {
      "description": "Use jsxDEV() runtime (dev)",
      "output": ".js"
    }
  },
  "__section_12_number": 12,
  "__section_12_name": "patterns",
  "__section_12_title": " Section 12: Common JSX Patterns",
  "__section_12_language": "JSX/React",
  "__section_12_total_items": 4,
  "__section_12_description": "Common JSX usage patterns: conditional rendering, list rendering, prop spreading, children patterns (render props, cloneElement)",
  "__section_12_purpose": "เก็บ patterns ที่ใช้บ่อยใน JSX: conditional rendering (ternary, &&, ||, ??), list rendering (.map), prop spreading, render props",
  "__section_12_responsibility": "Provides JSX patterns: conditionals (ternary, &&, ??, ||), list rendering with .map(), prop spreading, children patterns (render props, cloneElement)",
  "__section_12_used_by": "ReactDeveloper, JSXLinter, BestPracticesChecker",
  "__section_12_footer": "════════════════════════════════════════════════════════════════════════════════════════════════════════",
  "patterns": {
    "conditionalRendering": {
      "ternary": "condition ? <A /> : <B />",
      "logicalAnd": "condition && <Component />",
      "logicalOr": "value || <Default />",
      "nullCoalescing": "value ?? <Default />"
    },
    "listRendering": {
      "map": "array.map(item => <Item key={item.id} {...item} />)",
      "filter": "array.filter(predicate).map(item => <Item key={item.id} />)"
    },
    "propSpreading": {
      "spread": "<Component {...props} />",
      "override": "<Component {...props} className=\"custom\" />"
    },
    "childrenPatterns": {
      "renderProps": "<Container>{value => <Child value={value} />}</Container>",
      "cloneElement": "React.cloneElement(child, { additionalProp: value })"
    }
  },
  "escaping": {
    "": "'",
    "&#x...;": "Unicode code point",
    "&#...;": "Decimal code point",
    "attributeEscaping": {
      "singleQuote": "\\'",
      "doubleQuote": "\\\"",
      "backslash": "\\\\",
      "newline": "\\n",
      "tab": "\\t"
    }
  }
}